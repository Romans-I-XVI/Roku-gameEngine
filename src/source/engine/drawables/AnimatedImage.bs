' @module BGE
namespace BGE

  class AnimatedImage extends Image
    ' -------------Only To Be Changed For Animation---------------
    ' The following values should only be changed if the image is a spritesheet that needs to be animated.
    ' The spritesheet can have any assortment of multiple columns and rows.
    index = 0 ' This would not normally be changed manually, but if you wanted to stop on a specific image in the spritesheet this could be set.
    animationSpeed = 0 ' The time in milliseconds for a single cycle through the animation to play.
    animationTween = "LinearTween"

    ' -------------Never To Be Manually Changed-----------------
    ' These values should never need to be manually changed.
    protected regions as object = invalid
    private animationTimer = new GameTimer()
    private tweensReference = GetTweens()

    function new(owner as object, canvasBitmap as object, regions as object, args = {} as object)
      super(owner, canvasBitmap, invalid, args)
      m.regions = regions
      m.append(args)
    end function


    override function draw(additionalRotation = 0 as float)
      if m.enabled
        if m.animationSpeed > 0 and not m.owner.game.isPaused()
          m.animate()
        end if
        totalRotation = additionalRotation + m.rotation
        m.index = m.getCellDrawIndex()
        if m.index >= 0 and m.index < m.regions.Count()
          region = m.regions[m.index]
          x = m.owner.x + m.offset_x
          y = m.owner.y + m.offset_y
          rgba = (m.color << 8) + int(m.alpha)
          if m.scale_x = 1 and m.scale_y = 1 and totalRotation = 0
            m.drawTo.DrawObject(x, y, region, rgba)
          else if totalRotation = 0
            m.drawTo.DrawScaledObject(x, y, m.scale_x, m.scale_y, region, rgba)
          else
            m.drawTo.DrawRotatedObject(x, y, - totalRotation, region, rgba)
          end if
        end if
      end if
    end function

    function getCellDrawIndex() as integer
      frame_count = m.regions.Count()
      current_time = m.animationTimer.TotalMilliseconds()
      if current_time > m.animationSpeed
        current_time -= m.animationSpeed
        m.animationTimer.RemoveTime(m.animationSpeed)
      end if
      index = m.tweensReference[m.animationTween](0, frame_count, current_time, m.animation_speed)
      if index > frame_count - 1
        index = frame_count - 1
      else if m.index < 0
        index = 0
      end if
    end function

    override function onResume(pausedTime as integer)
      m.animationTimer.RemoveTime(pausedTime)
    end function
  end class
end namespace