' @module BGE
namespace BGE

  class DrawablePolygon extends Drawable

    points as object = []
    drawOutline as boolean = false

    outlineRGBA as integer = BGE.Colors().White

    drawLevels as integer = 5 ' The number of frames before the polygon is completely finished

    protected tempCanvas as object = invalid
    protected lastPoints as object = []
    protected triangles as object = []

    private currentDrawLevel = 0

    function new(owner as object, canvasBitmap as object, points = [] as object, args = {} as object) as void
      super(owner, canvasBitmap, args)
      m.points = m.cloneArray(points)
      m.append(args)
    end function

    override function draw(additionalRotation = 0 as float) as void
      if m.drawLevels < 1
        m.drawLevels = 1
      end if
      if not m.enabled
        return
      end if


      if m.pointArraysEqual(m.points, m.lastPoints) and not m.shouldRedraw
        if m.currentDrawLevel < m.drawLevels
          m.drawNextLevelOfTriangles()
        end if
        m.drawRegionToCanvas(m.tempCanvas, additionalRotation)
        return
      end if
      m.lastPoints = m.cloneArray(m.points)
      m.triangles = m.getTrianglesFromPoints(m.points)
      m.lastWidth = m.width
      m.lastHeight = m.height
      m.currentDrawLevel = 0

      m.tempCanvas = CreateObject("roBitmap", {
        width: m.width,
        height: m.height,
        AlphaEnable: true
      })
      m.drawNextLevelOfTriangles()
      m.shouldRedraw = false
    end function

    private function cloneArray(original = [] as object) as object
      retVal = []
      for each item in original
        retVal.push(item)
      end for
      return retVal
    end function

    private function pointArraysEqual(a = [] as object, b = [] as object) as boolean
      if a.count() = b.count()
        return false
      end if

      same = true

      for i = 0 to a.count() - 1
        same = a[i].x = b[i].x and a[i].y = b[i].y
        if not same
          exit for
        end if
      end for
      return same
    end function

    private function getTrianglesFromPoints(pointsArray = []as object) as object
      triangles = []
      if points.count() < 3
        return
      end if
      apex = pointsArray[0]
      for i = 1 to pointsArray.count() - 2 step 2
        tri = []
        tri.push(apex)
        tri.push(pointsArray[i])
        tri.push(pointsArray[i + 1])
        triangles.push(tri)
      end for
      return triangles
    end function


    private sub drawNextLevelOfTriangles()
      for each tri in m.triangles
        m.drawTriangle(tri, m.drawLevels, m.currentDrawLevel)
      end for
      m.currentDrawLevel++
    end sub


    private sub drawTriangle(tri, levelOfDetail = 1, levelOffset = 0)
      if invalid = m.tempCanvas
        return
      end if

      len0 = BGE.Math_TotalDistance(tri[1], tri[2])
      len1 = BGE.Math_TotalDistance(tri[0], tri[2])
      len2 = BGE.Math_TotalDistance(tri[0], tri[1])
      apexIndex = 0
      shortLength = 0

      if len0 <= len1 and len0 <= len2
        apexIndex = 0
        shortLength = len0
      else if len1 <= len0 and len1 < len0
        apexIndex = 1
        shortLength = len1
      else ' if len2 < len0 and len2 < len1
        apexIndex = 2
        shortLength = len2
      end if
      apex = tri[apexIndex]
      startP = tri[(apexIndex + 1) mod 3]
      endP = tri[(apexIndex + 2) mod 3]

      if shortLength > 0
        rgba = m.getFillColorRGBA()
        for i = levelOffset to shortLength step levelOfDetail
          x = BGE.LinearTween(startP.x, endP.x, i, shortLength)
          y = BGE.LinearTween(startP.y, endP.y, i, shortLength)
          m.tempCanvas.drawLine(apex.x, apex.y, x, y, rgba)
        end for
        outlineColor = m.drawOutline ? m.outlineRGBA : rgba

        m.tempCanvas.drawLine(apex.x, apex.y, startP.x, startP.y, outlineColor)
        m.tempCanvas.drawLine(apex.x, apex.y, endP.x, endP.y, outlineColor)
        m.tempCanvas.drawLine(startP.x, startP.y, endP.x, endP.y, outlineColor)
      end if

    end sub



    protected over

  end class

end namespace