' @module BGE
namespace BGE

  class Canvas
    bitmap as object = invalid
    offset_x = 0
    offset_y = 0
    scale_x = 1.0
    scale_y = 1.0

    function new(canvas_width as integer, canvas_height as integer)
      m.bitmap = CreateObject("roBitmap", {width: canvas_width, height: canvas_height, AlphaEnable: true})
    end function



    ' ############### canvasSetSize() function - Begin ###############
    function setSize(canvas_width as integer, canvas_height as integer) as void
      m.bitmap = CreateObject("roBitmap", {width: canvas_width, height: canvas_height, AlphaEnable: true})
    end function
    ' ############### canvasSetSize() function - Begin ###############


    ' ############### canvasGetOffset() function - Begin ###############
    function getOffset() as object
      return {x: m.offset_x, y: m.offset_y}
    end function
    ' ############### canvasGetOffset() function - Begin ###############


    ' ############### canvasGetScale() function - Begin ###############
    function getScale() as object
      return {x: m.scale_x, y: m.scale_y}
    end function
    ' ############### canvasGetScale() function - Begin ###############


    ' ############### canvasSetOffset() function - Begin ###############
    ' This is as Float to allow incrementing by less than 1 pixel, it is converted to integer internally
    function setOffset(x as float, y as float) as void
      m.offset_x = x
      m.offset_y = y
    end function
    ' ############### canvasSetOffset() function - End ###############


    ' ############### canvasSetScale() function - Begin ###############
    function setScale(scale_x as float, scale_y = invalid as dynamic) as void
      if scale_y = invalid
        scale_y = scale_x
      end if
      m.scale_x = scale_x
      m.scale_y = scale_y
    end function
    ' ############### canvasSetScale() function - End ###############


    function getWidth() as integer
      if invalid <> m.bitmap
        return m.bitmap.getWidth()
      end if
    end function

    function getHeight() as integer
      if invalid <> m.bitmap
        return m.bitmap.getHeight()
      end if
    end function

  end class
end namespace