

class Game
  ' ****BEGIN - For Internal Use, Do Not Manually Alter****

  private debugging = {
    draw_colliders: false
    draw_safe_zones: false
    limit_frame_rate: 0
  }
  private canvas_is_screen = false
  private background_color = &h000000FF
  private running = true
  private paused = false
  private sorted_instances = []
  private buttonHeld = -1
  private buttonHeldTime = 0
  private input_instance = invalid
  private current_input_instance = invalid
  private dt = 0
  private FakeDT = invalid
  private dtTimer = CreateObject("roTimespan")
  private pauseTimer = CreateObject("roTimespan")
  private buttonHeldTimer = CreateObject("roTimespan")
  private currentID = 0
  private shouldUseIntegerMovement = false
  private enableAudioGuideSuppression = true
  private empty_bitmap = CreateObject("roBitmap", {width: 1, height: 1, AlphaEnable: false})
  private device = CreateObject("roDeviceInfo")
  private urltransfers = {}
  private url_port = CreateObject("roMessagePort")
  private ecp_input_port = CreateObject("roMessagePort")
  private ecp_input = CreateObject("roInput")
  private compositor = CreateObject("roCompositor")
  private filesystem = CreateObject("roFileSystem")
  private screen_port = CreateObject("roMessagePort")
  private audioplayer = CreateObject("roAudioPlayer")
  private music_port = CreateObject("roMessagePort")
  private font_registry = CreateObject("roFontRegistry")
  private screen = invalid
  private canvas = new Canvas()
  ' ****END - For Internal Use, Do Not Manually Alter****

  ' ****Variables****
  currentRoom = invalid
  currentRoomArgs = {}
  Instances = {} ' This holds all of the game object instances
  Statics = {} ' This holds all static variables for a given object type
  Objects = {} ' This holds the object definitions by name (the object creation functions)
  Rooms = {} ' This holds the room definitions by name (the room creation functions)
  Interfaces = {} ' This holds the interface definitions by name.
  Bitmaps = {} ' This holds the loaded bitmaps by name
  Sounds = {} ' This holds the loaded sounds by name
  Fonts = {} ' This holds the loaded fonts by name


  sub new(canvas_width as integer, canvas_height as integer, canvas_as_screen_if_possible = false)

    ' ############### Create Initial Object - Begin ###############

    ' Set up the screen
    m.setUpScreen(canvas_width, canvas_height, canvas_as_screen_if_possible)

    ' Set up the audioplayer
    m.audioplayer.SetMessagePort(m.music_port)

    ' Set up the input port
    m.ecp_input.SetMessagePort(m.ecp_input_port)

    ' Register all fonts in package
    m.setUpFonts()

    ' ############### Create Initial Object - End ###############


  end sub


  private function setUpScreen(canvas_width as integer, canvas_height as integer, canvas_as_screen_if_possible = false) as void
    UIResolution = m.device.getUIResolution()
    SupportedResolutions = m.device.GetSupportedGraphicsResolutions()
    FHD_Supported = false
    for i = 0 to SupportedResolutions.Count() - 1
      if SupportedResolutions[i].name = "FHD"
        FHD_Supported = true
      end if
    end for


    if UIResolution.name = "SD"
      'bs:disable-next-line
      m.screen = CreateObject("roScreen", true, 854, 626)
    else
      if canvas_width <= 854
        'bs:disable-next-line
        m.screen = CreateObject("roScreen", true, 854, 480)
      else if canvas_width <= 1280 or not FHD_Supported
        'bs:disable-next-line
        m.screen = CreateObject("roScreen", true, 1280, 720)
      else
        'bs:disable-next-line
        m.screen = CreateObject("roScreen", true, 1920, 1080)
      end if
    end if
    m.compositor.SetDrawTo(m.screen, &h00000000)
    m.screen.SetMessagePort(m.screen_port)
    m.screen.SetAlphaEnable(true)

    if canvas_as_screen_if_possible
      if m.screen.GetWidth() = m.canvas.bitmap.GetWidth() and m.screen.GetHeight() = m.canvas.bitmap.GetHeight()
        m.canvas.bitmap = m.screen
        m.canvas_is_screen = true
      end if
    end if
  end function


  private function setUpFonts() as void
    ttfs_in_package = m.filesystem.FindRecurse("pkg:/fonts/", ".ttf")
    otfs_in_package = m.filesystem.FindRecurse("pkg:/fonts/", ".otf")
    for each font_path in ttfs_in_package
      m.font_registry.Register("pkg:/fonts/" + font_path)
    end for
    for each font_path in otfs_in_package
      m.font_registry.Register("pkg:/fonts/" + font_path)
    end for

    ' Create the default font
    m.Fonts["default"] = m.font_registry.GetDefaultFont(28, false, false)
  end function

  ' ################################################################ Play() function - Begin #####################################################################################################
  public function Play() as void

    audio_guide_suppression_roURLTransfer = CreateObject("roURLTransfer")
    audio_guide_suppression_roURLTransfer.SetUrl("http://localhost:8060/keydown/Backspace")
    audio_guide_suppression_ticker = 0

    m.running = true

    while m.running

      if m.input_instance <> invalid and m.getInstanceByID(m.input_instance) = invalid
        m.input_instance = invalid
      end if
      m.current_input_instance = m.input_instance
      m.compositor.Draw() ' For some reason this has to be called or the colliders don't remove themselves from the compositor ¯\(°_°)/¯

      m.dt = m.dtTimer.TotalMilliseconds() / 1000
      if m.FakeDT <> invalid
        m.dt = m.FakeDT
      end if
      m.dtTimer.Mark()
      url_msg = m.url_port.GetMessage()
      universal_control_events = []
      screen_msg = m.screen_port.GetMessage()
      ecp_msg = m.ecp_input_port.GetMessage()
      while screen_msg <> invalid
        if type(screen_msg) = "roUniversalControlEvent" and screen_msg.GetInt() <> 11
          universal_control_events.Push(screen_msg)
          if screen_msg.GetInt() < 100
            m.buttonHeld = screen_msg.GetInt()
            m.buttonHeldTimer.Mark()
          else
            m.buttonHeld = -1
            if m.enableAudioGuideSuppression
              if screen_msg.GetInt() = 110
                audio_guide_suppression_ticker++
                if audio_guide_suppression_ticker = 3
                  audio_guide_suppression_roURLTransfer.AsyncPostFromString("")
                  audio_guide_suppression_ticker = 0
                end if
              else
                audio_guide_suppression_ticker = 0
              end if
            end if
            m.buttonHeldTime = m.buttonHeldTimer.TotalMilliseconds()
          end if
        end if
        screen_msg = m.screen_port.GetMessage()
      end while

      music_msg = m.music_port.GetMessage()

      ' ----------------------Handle instance interactions (collisions, etc)--------------------
      m.processInstancesPreDraw()

      ' ----------------------Clear the screen before drawing instances-------------------------
      if m.background_color <> invalid
        m.canvas.bitmap.Clear(m.background_color)
      end if

      ' ----------------------Then draw all of the instances and call onDrawBegin() and onDrawEnd()-------------------------
      m.sorted_instances.SortBy("depth")
      for i = m.sorted_instances.Count() - 1 to 0 step -1
        instance = m.sorted_instances[i]
      if instance = invalid or instance.id = invalid : goto end_of_draw_loop : end if
      if instance.onDrawBegin <> invalid
        instance.onDrawBegin(m.canvas.bitmap)
      if instance = invalid or instance.id = invalid : goto end_of_draw_loop : end if
    end if
    for each image in instance.images
      image.Draw()
    end for
    if instance.onDrawEnd <> invalid
      instance.onDrawEnd(m.canvas.bitmap)
    end if
    end_of_draw_loop:
  end for

  ' Draw Debug Related Items
  if m.debugging.draw_colliders
    for i = m.sorted_instances.Count() - 1 to 0 step -1
      instance = m.sorted_instances[i]
      if instance <> invalid and instance.id <> invalid and instance.colliders <> invalid
        m.drawColliders(instance)
      end if
    end for
  end if

  ' -------------------Draw everything to the screen----------------------------
  if not m.canvas_is_screen
    m.screen.DrawScaledObject(m.canvas.offset_x, m.canvas.offset_y, m.canvas.scale_x, m.canvas.scale_y, m.canvas.bitmap)
  end if

  if m.debugging.draw_safe_zones
    m.drawSafeZones()
  end if

  m.screen.SwapBuffers()

  if m.debugging.limit_frame_rate > 0 and m.dtTimer.TotalMilliseconds() > 0
    while 1000 / m.dtTimer.TotalMilliseconds() > m.debugging.limit_frame_rate
      sleep(1)
    end while
  end if

  ' ------------------Destroy the UrlTransfer object if it has returned an event------------------
  if type(url_msg) = "roUrlEvent"
    url_transfer_id_string = url_msg.GetSourceIdentity().ToStr()
    if m.urltransfers.DoesExist(url_transfer_id_string) then
      m.urltransfers.Delete(url_transfer_id_string)
    end if
  end if

end while

end function
' ################################################################ Play() function - End #####################################################################################################

' --------------------Begin giant loop for processing all game objects----------------
' Before every instance interaction, the instance is checked to make sure it is still valid
' in case it was deleted in the last interaction
private function processInstancesPreDraw() as void
  started_paused = m.paused
  for i = m.sorted_instances.Count() - 1 to 0 step -1
    instance = m.sorted_instances[i]
    if m.isValidInstance(instance) or not instance.enabled or (started_paused and instance.pauseable)
      processInstance = false
    else


      ' --------------------First process the onButton() function--------------------
      if m.isValidInstance(instance)
        m.processInstanceOnButton(instance, universal_control_events)
      end if

      ' -------------------Then send the audioplayer event msg if applicable-------------------
      if m.isValidInstance(instance) and invalid <> instance.onAudioEvent and "roAudioPlayerEvent" = type(music_msg)
        instance.onAudioEvent(music_msg)
      end if

      ' -------------------Then send the ecp input events if applicable-------------------
      if m.isValidInstance(instance) and invalid <> instance.onECPInput and "roInputEvent" = type(ecp_msg) and ecp_msg.isInput()
        instance.onECPInput(ecp_msg.GetInfo())
      end if

      ' -------------------Then send the urltransfer event msg if applicable-------------------
      if m.isValidInstance(instance) and invalid <> instance.onUrlEvent and "roUrlEvent" = type(url_msg)
        instance.onUrlEvent(url_msg)
      end if


      ' -------------------Then process the onUpdate() function----------------------
      if m.isValidInstance(instance) and invalid <> instance.onUpdate
        instance.onUpdate(m.dt)
      end if


      ' -------------------- Then handle the object movement--------------------
      if m.isValidInstance(instance)
        m.processInstanceMovement(instance)
      end if

      ' ---------------- Give a space for any processing to happen just before collision checking occurs ------------
      if m.isValidInstance(instance) and invalid <> instance.onPreCollision
        instance.onPreCollision()
      end if

      ' -------------------Then handle collisions and call onCollision() for each collision---------------------------
      if m.isValidInstance(instance) and invalid <> instance.onCollision
        m.processInstanceOnCollision(instance)
      end if

      ' ---------------- Give a space for any processing to happen just after collision checking occurs ------------
      if m.isValidInstance(instance) and invalid <> instance.onPostCollision
        instance.onPostCollision()
      end if

      ' --------------Adjust compositor collider at end of loop so collider is accurate for collision checking from other objects-------------
      if m.isValidInstance(instance)
        m.adjustInstanceCompositorObjectPostCollision(instance)
      end if
    end if

    m.deleteIfInvalidInstance(instance)
  end for
end function

private function isValidInstance(instance as object) as boolean
  return invalid <> instance and invalid <> instance.id
end function


private function deleteIfInvalidInstance(instance as object) as void
  if not m.isValidInstance(instance)
    m.sorted_instances.Delete(i)
  end if
end function


private function processInstanceOnButton(instance as object, universal_control_events as object) as boolean
  if not m.isValidInstance(instance)
    return false
  end if
  for each msg in universal_control_events
    if instance.onButton <> invalid and (m.current_input_instance = invalid or m.current_input_instance = instance.id)
      instance.onButton(msg.GetInt())
      if not m.isValidInstance(instance)
        return false
      end if
    end if

    if instance.onECPKeyboard <> invalid and msg.GetChar() <> 0 and msg.GetChar() = msg.GetInt()
      instance.onECPKeyboard(Chr(msg.GetChar()))
      if not m.isValidInstance(instance)
        return false
      end if
    end if
  end for
  if m.buttonHeld <> -1 then
    ' Button release codes are 100 plus the button press code
    ' This shows a button held code as 1000 plus the button press code
    if instance.onButton <> invalid and (m.current_input_instance = invalid or m.current_input_instance = instance.id)
      instance.onButton(1000 + m.buttonHeld)
      if not m.isValidInstance(instance)
        return false
      end if
    end if
  end if
  return true
end function

private function processInstanceMovement(instance as object) as boolean
  if not m.isValidInstance(instance)
    return false
  end if
  if m.shouldUseIntegerMovement
    instance.x = instance.x + cint(instance.xspeed * 60 * m.dt)
    instance.y = instance.y + cint(instance.yspeed * 60 * m.dt)
  else
    instance.x = instance.x + instance.xspeed * 60 * m.dt
    instance.y = instance.y + instance.yspeed * 60 * m.dt
  end if
  return true
end function


private function processInstanceOnCollision(instance as object) as boolean
  if not m.isValidInstance(instance)
    return false
  end if
  for each collider_key in instance.colliders
    collider = instance.colliders[collider_key]
    if collider <> invalid then
      if collider.enabled then
        collider.compositor_object.SetMemberFlags(collider.member_flags)
        collider.compositor_object.SetCollidableFlags(collider.collidable_flags)
        collider.setupCompositorObjectRegionCollider()
        collider.compositor_object.MoveTo(instance.x, instance.y)
        multiple_collisions = collider.compositor_object.CheckMultipleCollisions()
        if multiple_collisions <> invalid
          for each other_collider in multiple_collisions
            other_collider_data = other_collider.GetData()
            if other_collider_data.instance_id <> instance.id and m.Instances[other_collider_data.object_name].DoesExist(other_collider_data.instance_id)
              instance.onCollision(collider_key, other_collider_data.collider_name, m.Instances[other_collider_data.object_name][other_collider_data.instance_id])
              if not m.isValidInstance(instance)
                return false
              end if
            end if
          end for
          if not m.isValidInstance(instance)
            return false
          end if
        end if
      else
        collider.compositor_object.SetMemberFlags(0)
        collider.compositor_object.SetCollidableFlags(0)
      end if
    else
      if instance.colliders.DoesExist(collider_key)
        instance.colliders.Delete(collider_key)
      end if
    end if
  end for
  return true
end function

private function adjustInstanceCompositorObjectPostCollision(instance as object) as boolean
  if not m.isValidInstance(instance)
    return false
  end if
  for each collider_key in instance.colliders
    collider = instance.colliders[collider_key]
    if collider <> invalid then
      collider.adjustCompositorObject(instance.x, instance.y)
    else
      if instance.colliders.DoesExist(collider_key)
        instance.colliders.Delete(collider_key)
      end if
    end if
  end for

  return true
end function

private function drawInstances() as void

  ' ----------------------Then draw all of the instances and call onDrawBegin() and onDrawEnd()-------------------------
  m.sorted_instances.SortBy("depth")
  for i = m.sorted_instances.Count() - 1 to 0 step -1
    instance = m.sorted_instances[i]
    m.processInstanceDraw(instance)
  end for
end function


private function processInstanceDraw(instance) as boolean
  if not m.instanceIsValid(instance)
    return false
  end if
  if m.instanceIsValid(instance) and invalid <> instance.onDrawBegin
    instance.onDrawBegin(m.canvas.bitmap)
  end if
  if m.instanceIsValid(instance)
    for each image in instance.images
      image.Draw()
    end for

    if m.instanceIsValid(instance) and invalid <> instance.onDrawEnd
      instance.onDrawEnd(m.canvas.bitmap)
    end if
  end if
  return m.instanceIsValid(instance)
end function


' ############### DebugDrawColliders() function - Begin ###############
function debugDrawColliders(enabled as boolean) as void
  m.debugging.draw_colliders = enabled
end function
' ############### DebugDrawColliders() function - End ###############

' ############### DebugDrawSafeZones() function - Begin ###############
function debugDrawSafeZones(enabled as boolean) as void
  m.debugging.draw_safe_zones = enabled
end function
' ############### DebugDrawSafeZones() function - End ###############

' ############### DebugLimitFrameRate() function - Begin ###############
function debugLimitFrameRate(limit_frame_rate as integer) as void
  m.debugging.limit_frame_rate = limit_frame_rate
end function
' ############### DebugLimitFrameRate() function - End ###############

' ############### DrawColliders() function - Begin ###############
function drawColliders(instance as object, color = &hFF0000FF as integer) as void
  for each collider_key in instance.colliders
    collider = instance.colliders[collider_key]
    if collider.enabled then
      collider.debugDraw(m.canvas.bitmap, instance.x, instance.y, color)
    end if
  end for
end function
' ############### DrawColliders() function - End ###############



' ############### DrawSafeZones() function - End ###############
function drawSafeZones() as void
  screen_width = m.screen.GetWidth()
  screen_height = m.screen.GetHeight()
  if m.device.GetDisplayAspectRatio() = "4x3" then
    action_offset = {w: 0.033 * screen_width, h: 0.035 * screen_height}
    title_offset = {w: 0.067 * screen_width, h: 0.05 * screen_height}
  else
    action_offset = {w: 0.035 * screen_width, h: 0.035 * screen_height}
    title_offset = {w: 0.1 * screen_width, h: 0.05 * screen_height}
  end if
  action_safe_zone = {x1: action_offset.w, y1: action_offset.h, x2: screen_width - action_offset.w, y2: screen_height - action_offset.h}
  title_safe_zone = {x1: title_offset.w, y1: title_offset.h, x2: screen_width - title_offset.w, y2: screen_height - title_offset.h}

  m.screen.DrawRect(action_safe_zone.x1, action_safe_zone.y1, action_safe_zone.x2 - action_safe_zone.x1, action_safe_zone.y2 - action_safe_zone.y1, &hFF00003F)
  m.screen.DrawRect(title_safe_zone.x1, title_safe_zone.y1, title_safe_zone.x2 - title_safe_zone.x1, title_safe_zone.y2 - title_safe_zone.y1, &h0000FF3F)
  m.screen.DrawText("Action Safe Zone", m.screen.GetWidth() / 2 - m.getFont("default").GetOneLineWidth("Action Safe Zone", 1000) / 2, action_safe_zone.y1 + 10, &hFF0000FF, m.getFont("default"))
  m.screen.DrawText("Title Safe Zone", m.screen.GetWidth() / 2 - m.getFont("default").GetOneLineWidth("Title Safe Zone", 1000) / 2, action_safe_zone.y1 + 50, &hFF00FFFF, m.getFont("default"))
end function
' ############### DrawSafeZones() function - End ###############



' ############### End() function - Begin ###############
function End() as void
  m.running = false
end function
' ############### End() function - End ###############



' ############### Pause() function - Begin ###############
function Pause() as void
  if not m.paused then
    m.paused = true

    for each object_key in m.Instances
      for each instance_key in m.Instances[object_key]
        instance = m.Instances[object_key][instance_key]
        if instance <> invalid and instance.id <> invalid and instance.onPause <> invalid
          instance.onPause()
        end if
      end for
    end for

    m.pauseTimer.Mark()
  end if
end function
' ############### Pause() function - End ###############



' ############### Resume() function - Begin ###############
function Resume() as dynamic
  if m.paused then
    m.paused = false
    paused_time = m.pauseTimer.TotalMilliseconds()

    for each object_key in m.Instances
      for each instance_key in m.Instances[object_key]
        instance = m.Instances[object_key][instance_key]
        for each image in instance.images
          if image.DoesExist("onResume") and image.onResume <> invalid
            image.onResume(paused_time)
          end if
        end for
        if instance <> invalid and instance.id <> invalid and instance.onResume <> invalid
          instance.onResume(paused_time)
        end if
      end for
    end for

    return paused_time
  end if
  return invalid
end function
' ############### Resume() function - End ###############



' ############### isPaused() function - Begin ###############
function isPaused() as boolean
  return m.paused
end function
' ############### isPaused() function - End ###############

' ############### setBackgroundColor() function - Begin ###############
function setBackgroundColor(color as integer) as void
  m.background_color = color
end function
' ############### setBackgroundColor() function - Begin ###############

' ############### getDeltaTime() function - Begin ###############
function getDeltaTime() as float
  return m.dt
end function
' ############### getDeltaTime() function - Begin ###############


' ############### getRoom() function - Begin ###############
function getRoom() as object
  return m.currentRoom
end function
' ############### getRoom() function - Begin ###############



' ############### getCanvas() function - Begin ###############
function getCanvas() as object
  return m.canvas.bitmap
end function
' ############### getCanvas() function - Begin ###############



' ############### getScreen() function - Begin ###############
function getScreen() as object
  return m.screen
end function
' ############### getScreen() function - Begin ###############



' ############### resetScreen() function - Begin ###############
function resetScreen() as void
  ' UIResolution = m.device.getUIResolution()
  ' if UIResolution.name = "SD"
  '   m.screen = CreateObject("roScreen", true, 854, 626)
  ' else
  '   m.screen = CreateObject("roScreen", true, 1280, 720)
  ' end if
  ' m.compositor.SetDrawTo(m.screen, &h00000000)
  ' m.screen.SetMessagePort(m.screen_port)
  ' m.screen.SetAlphaEnable(true)

  m.setUpScreen(m.screen.GetWidth(), m.screen.GetHeight(), m.canvas_is_screen)
  if m.canvas_is_screen
    m.canvas.bitmap = m.screen

    ' This is so all instances that have images that draw to the screen get updated with the new screen.
    for each object_key in m.Instances
      for each instance_key in m.Instances[object_key]
        instance = m.Instances[object_key][instance_key]
        if instance <> invalid and instance.id <> invalid and instance.DoesExist("images")
          for each image in instance.images
            if type(image.draw_to) = "roScreen"
              image.draw_to = m.screen
            end if
          end for
        end if
      end for
    end for
  end if
end function
' ############### resetScreen() function - Begin ###############


' --------------------------------Begin Object Functions----------------------------------------


' ############### defineObject() function - Begin ###############
function defineObject(object_name as string, object_creation_function as function) as void
  m.Objects[object_name] = object_creation_function
  m.Instances[object_name] = {}
  m.Statics[object_name] = {}
end function
' ############### defineObject() function - End ###############



' ############### defineInterface() function - Begin ###############
function defineInterface(interface_name as string, interface_creation_function as function) as void
  m.Interfaces[interface_name] = interface_creation_function
end function
' ############### defineInterface() function - End ###############



' ############### createInstance() function - Begin ###############
function createInstance(object_name as string, args = {} as object) as dynamic
  if m.Objects.DoesExist(object_name)
    new_instance = m.newEmptyObject(object_name)
    m.Objects[object_name](new_instance)
    new_instance.onCreate(args)
    return new_instance
  else
    return invalid
  end if
end function
' ############### createInstance() function - End ###############



' ############### getInstanceByID() function - Begin ###############
function getInstanceByID(instance_id as string) as dynamic
  for each object_key in m.Instances
    if m.Instances[object_key].DoesExist(instance_id) then
      return m.Instances[object_key][instance_id]
    end if
  end for
  return invalid
end function
' ############### getInstanceByID() function - End ###############



' ############### getInstanceByName() function - Begin ###############
function getInstanceByName(object_name as string) as dynamic
  if m.Instances.DoesExist(object_name) then
    for each instance_key in m.Instances[object_name]
      return m.Instances[object_name][instance_key] ' Obviously only retrieves the first value
    end for
  end if
  return invalid
end function
' ############### getInstanceByName() function - End ###############



' ############### getAllInstances() function - Begin ###############
function getAllInstances(object_name as string) as dynamic
  if m.Instances.DoesExist(object_name) then
    array = []
    for each instance_key in m.Instances[object_name]
      array.Push(m.Instances[object_name][instance_key])
    end for
    return array
  else
    return invalid
  end if
end function
' ############### getAllInstances() function - Begin ###############



' ############### getAllInstancesWithInterface() function - Begin ###############
function getAllInstancesWithInterface(interface_name as string) as dynamic
  if m.Interfaces.DoesExist(interface_name)
    array = []
    for each instance in m.sorted_instances
      if instance <> invalid and instance.id <> invalid and instance.hasInterface(interface_name)
        array.Push(instance)
      end if
    end for

    return array
  else
    return invalid
  end if
end function
' ############### getAllInstancesWithInterface() function - Begin ###############



' ############### destroyInstance() function - Begin ###############
function destroyInstance(instance as object, call_on_destroy = true) as void
  if instance <> invalid and instance.id <> invalid and m.Instances[instance.name].DoesExist(instance.id) then
    for each collider_key in instance.colliders
      collider = instance.colliders[collider_key]
      if type(collider.compositor_object) = "roSprite" then
        collider.compositor_object.Remove()
      end if
    end for
    if instance.onDestroy <> invalid and call_on_destroy
      instance.onDestroy()
    end if
    if instance <> invalid and instance.id <> invalid and m.Instances[instance.name].DoesExist(instance.id) ' This redundency is here because if somebody would try to change rooms within the onDestroy() method the game would break.
      m.Instances[instance.name].Delete(instance.id)
      instance.Clear()
      instance.id = invalid
    end if
  end if
end function
' ############### destroyInstance() function - End ###############



' ############### destroyAllInstances() function - Begin ###############
function destroyAllInstances(object_name as string, call_on_destroy = true) as void
  for each instance_key in m.Instances[object_name]
    m.destroyInstance(m.Instances[object_name][instance_key], call_on_destroy)
  end for
end function
' ############### destroyAllInstances() function - End ###############



' ############### instanceCount() function - Begin ###############
function instanceCount(object_name as string) as integer
  return m.Instances[object_name].Count()
end function
' ############### instanceCount() function - End ###############


' --------------------------------Begin Room Functions----------------------------------------


' ############### defineRoom() function - Begin ###############
function defineRoom(room_name as string, room_creation_function as function) as void
  m.Rooms[room_name] = room_creation_function
  m.Instances[room_name] = {}
  m.Statics[room_name] = {}
end function
' ############### defineRoom() function - Begin ###############



' ############### changeRoom() function - Begin ###############
function changeRoom(room_name as string, args = {} as object) as boolean
  if m.Rooms[room_name] <> invalid then
    for each object_key in m.Instances
      for each instance_key in m.Instances[object_key]
        instance = m.Instances[object_key][instance_key]
        if instance <> invalid and instance.id <> invalid and instance.onChangeRoom <> invalid then
          instance.onChangeRoom(room_name)
        end if
      end for
    end for
    for each object_key in m.Instances
      for each instance_key in m.Instances[object_key]
        instance = m.Instances[object_key][instance_key]
        if instance.id <> invalid and not instance.persistent and instance.name <> m.currentRoom.name then
          m.destroyInstance(instance, false)
        end if
      end for
    end for
    if m.currentRoom <> invalid and m.currentRoom.id <> invalid then
      m.destroyInstance(m.currentRoom, false)
    end if
    m.currentRoom = m.newEmptyObject(room_name)
    m.Rooms[room_name](m.currentRoom)
    m.currentRoomArgs = args
    m.currentRoom.onCreate(args)
    return true
  else
    print "changeRoom() - A room named " + room_name + " hasn't been defined"
    return false
  end if
end function
' ############### changeRoom() function - End ###############



' ############### resetRoom() function - End ###############
function resetRoom() as void
  m.changeRoom(m.currentRoom.name, m.currentRoomArgs)
end function
' ############### resetRoom() function - End ###############


' --------------------------------Begin Bitmap Functions----------------------------------------


' ############### loadBitmap() function - Begin ###############
function loadBitmap(bitmap_name as string, path as dynamic) as boolean
  if type(path) = "roAssociativeArray" then
    if path.width <> invalid and path.height <> invalid and path.AlphaEnable <> invalid then
      m.Bitmaps[bitmap_name] = CreateObject("roBitmap", path)
      return true
    else
      print "loadBitmap() - Width as Integer, Height as Integer, and AlphaEnabled as Boolean must be provided in order to create an empty bitmap"
      return false
    end if
  else if m.filesystem.Exists(path) then
    path_object = CreateObject("roPath", path)
    parts = path_object.Split()
    if parts.extension = ".png" or parts.extension = ".jpg" then
      m.Bitmaps[bitmap_name] = CreateObject("roBitmap", path)
      return true
    else
      print "loadBitmap() - Bitmap not loaded, file must be of type .png or .jpg"
      return false
    end if
  else
    print "loadBitmap() - Bitmap not created, invalid path or object properties provided"
    return false
  end if
end function
' ############### loadBitmap() function - End ###############



' ############### getBitmap() function - Begin ###############
function getBitmap(bitmap_name as string) as dynamic
  return m.Bitmaps[bitmap_name]
end function
' ############### getBitmap() function - End ###############



' ############### unloadBitmap() function - Begin ###############
function unloadBitmap(bitmap_name as string)
  m.Bitmaps[bitmap_name] = invalid
end function
' ############### unloadBitmap() function - End ###############


' --------------------------------Begin Font Functions----------------------------------------


' ############### registerFont() function - Begin ###############
function registerFont(path as string) as boolean
  if m.filesystem.Exists(path) then
    path_object = CreateObject("roPath", path)
    parts = path_object.Split()
    if parts.extension = ".ttf" or parts.extension = ".otf" then
      m.font_registry.register(path)
      return true
    else
      print "Font must be of type .ttf or .otf"
      return false
    end if
  else
    print "File at path " ; path ; " doesn't exist"
    return false
  end if
end function
' ############### registerFont() function - End ###############



' ############### loadFont() function - Begin ###############
function loadFont(font_name as string, font as string, size as integer, italic as boolean, bold as boolean) as void
  m.Fonts[font_name] = m.font_registry.GetFont(font, size, italic, bold)
end function
' ############### loadFont() function - End ###############



' ############### unloadFont() function - Begin ###############
function unloadFont(font_name as string) as void
  m.Fonts[font_name] = invalid
end function
' ############### unloadFont() function - End ###############



' ############### getFont() function - Begin ###############
function getFont(font_name as string) as object
  return m.Fonts[font_name]
end function
' ############### getFont() function - End ###############


' --------------------------------Begin Canvas Functions----------------------------------------

' ############### canvasSetSize() function - Begin ###############
function canvasSetSize(canvas_width as integer, canvas_height as integer) as void
  m.canvas.bitmap = CreateObject("roBitmap", {width: canvas_width, height: canvas_height, AlphaEnable: true})
end function
' ############### canvasSetSize() function - Begin ###############


' ############### canvasGetOffset() function - Begin ###############
function canvasGetOffset() as object
  return {x: m.canvas.offset_x, y: m.canvas.offset_y}
end function
' ############### canvasGetOffset() function - Begin ###############


' ############### canvasGetScale() function - Begin ###############
function canvasGetScale() as object
  return {x: m.canvas.scale_x, y: m.canvas.scale_y}
end function
' ############### canvasGetScale() function - Begin ###############


' ############### canvasSetOffset() function - Begin ###############
' This is as Float to allow incrementing by less than 1 pixel, it is converted to integer internally
function canvasSetOffset(x as float, y as float) as void
  m.canvas.offset_x = x
  m.canvas.offset_y = y
end function
' ############### canvasSetOffset() function - End ###############


' ############### canvasSetScale() function - Begin ###############
function canvasSetScale(scale_x as float, scale_y = invalid as dynamic) as void
  if scale_y = invalid
    scale_y = scale_x
  end if
  m.canvas.scale_x = scale_x
  m.canvas.scale_y = scale_y
end function
' ############### canvasSetScale() function - End ###############


' ############### canvasFitToScreen() function - Begin ###############
function canvasFitToScreen() as void
  canvas_width = m.canvas.bitmap.GetWidth()
  canvas_height = m.canvas.bitmap.GetHeight()
  screen_width = m.screen.GetWidth()
  screen_height = m.screen.GetHeight()
  if screen_width / screen_height < canvas_width / canvas_height then
    m.canvas.scale_x = screen_width / canvas_width
    m.canvas.scale_y = m.canvas.scale_x
    m.canvas.offset_x = 0
    m.canvas.offset_y = (screen_height - (screen_width / (canvas_width / canvas_height))) / 2
  else if screen_width / screen_height > canvas_width / canvas_height then
    m.canvas.scale_x = screen_height / canvas_height
    m.canvas.scale_y = m.canvas.scale_x
    m.canvas.offset_x = (screen_width - (screen_height * (canvas_width / canvas_height))) / 2
    m.canvas.offset_y = 0
  else
    m.canvas.offset_x = 0
    m.canvas.offset_y = 0
    scale_difference = screen_width / canvas_width
    m.canvas.scale_x = 1 * scale_difference
    m.canvas.scale_y = 1 * scale_difference
  end if
end function
' ############### canvasFitToScreen() function - End ###############



' ############### canvasCenterToScreen() function - Begin ###############
function canvasCenterToScreen() as void
  m.canvas.offset_x = m.screen.GetWidth() / 2 - (m.canvas.scale_x * m.canvas.bitmap.GetWidth()) / 2
  m.canvas.offset_y = m.screen.GetHeight() / 2 - (m.canvas.scale_y * m.canvas.bitmap.GetHeight()) / 2
end function
' ############### canvasCenterToScreen() function - End ###############


' --------------------------------Begin Audio Functions----------------------------------------


' ############### musicPlay() function - Begin ###############
function musicPlay(path as string, loop = false as boolean) as boolean
  if m.filesystem.Exists(path) then
    m.audioplayer.stop()
    m.audioplayer.ClearContent()
    song = {}
    song.url = path
    m.audioplayer.AddContent(song)
    m.audioplayer.SetLoop(loop)
    m.audioPlayer.play()
    return true
  else
    print "musicPlay() - No file exists at path: " ; path
    return false
  end if
end function
' ############### musicPlay() function - End ###############



' ############### musicStop() function - Begin ###############
function musicStop() as void
  m.audioplayer.stop()
end function
' ############### musicStop() function - End ###############



' ############### musicPause() function - Begin ###############
function musicPause() as void
  m.audioplayer.pause()
end function
' ############### musicPause() function - End ###############



' ############### musicResume() function - Begin ###############
function musicResume() as void
  m.audioplayer.resume()
end function
' ############### musicResume() function - End ###############



' ############### loadSound() function - Begin ###############
function loadSound(sound_name as string, path as string) as void
  m.Sounds[sound_name] = CreateObject("roAudioResource", path)
end function
' ############### loadSound() function - End ###############



' ############### playSound() function - Begin ###############
function playSound(sound_name as string, volume = 100 as integer) as boolean
  if m.Sounds.DoesExist(sound_name) then
    m.Sounds[sound_name].trigger(volume)
    return true
  else
    print "playSound() - No sound has been loaded under the name: " ; sound_name
    return false
  end if
end function
' ############### playSound() function - End ###############



' ############### newAsyncUrlTransfer() function - Begin ###############
function newAsyncUrlTransfer() as object
  UrlTransfer = CreateObject("roUrlTransfer")
  UrlTransfer.SetMessagePort(m.url_port)
  m.urltransfers[UrlTransfer.GetIdentity().ToStr()] = UrlTransfer
  return UrlTransfer
end function
' ############### newAsyncUrlTransfer() function - End ###############

' ############### setInputInstance() function - Begin ###############
function setInputInstance(instance as object) as void
  m.input_instance = instance.id
end function
' ############### setInputInstance() function - End ###############

' ############### unsetInputInstance() function - Begin ###############
function unsetInputInstance() as void
  m.input_instance = invalid
end function
' ############### unsetInputInstance() function - End ###############

' ############### postGameEvent() function - Begin ###############
function postGameEvent(event as string, data = {} as object) as void
  object_keys = m.Instances.Keys()
  for each object_key in object_keys
    instance_keys = m.Instances[object_key].Keys()
    for each instance_key in instance_keys
      instance = m.Instances[object_key][instance_key]
      if instance <> invalid and instance.id <> invalid and instance.onGameEvent <> invalid
        instance.onGameEvent(event, data)
      end if
    end for
  end for
end function
' ############### postGameEvent() function - End ###############



end class