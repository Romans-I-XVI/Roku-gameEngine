' @module BGE
namespace BGE

  function Colors() as object
    if invalid <> m and invalid <> m.BGEColorsConstant
      return m.BGEColorsConstant
    end if

    colorsObj = {
      Black: BGE.RGBAtoRGBA(0, 0, 0),
      White: BGE.RGBAtoRGBA(255, 255, 255),
      Red: BGE.RGBAtoRGBA(255, 0, 0),
      Lime: BGE.RGBAtoRGBA(0, 255, 0),
      Blue: BGE.RGBAtoRGBA(0, 0, 255),
      Yellow: BGE.RGBAtoRGBA(255, 255, 0),
      Cyan: BGE.RGBAtoRGBA(0, 255, 255),
      Aqua: BGE.RGBAtoRGBA(0, 255, 255),
      Magenta: BGE.RGBAtoRGBA(255, 0, 255),
      Pink: BGE.RGBAtoRGBA(255, 0, 255),
      Fuchsia: BGE.RGBAtoRGBA(255, 0, 255),
      Silver: BGE.RGBAtoRGBA(192, 192, 192),
      Gray: BGE.RGBAtoRGBA(128, 128, 128),
      Grey: BGE.RGBAtoRGBA(128, 128, 128),
      Maroon: BGE.RGBAtoRGBA(128, 0, 0),
      Olive: BGE.RGBAtoRGBA(128, 128, 0),
      Green: BGE.RGBAtoRGBA(0, 128, 0),
      Purple: BGE.RGBAtoRGBA(128, 0, 128),
      Teal: BGE.RGBAtoRGBA(0, 128, 128),
      Navy: BGE.RGBAtoRGBA(0, 0, 128),
    }

    if invalid <> m
      m.BGEColorsConstant = colorsObj
    end if

    return colorsObj
  end function

  function ColorsRGB() as object
    if invalid <> m and invalid <> m.BGEColorsRGBConstant
      return m.BGEColorsRGBConstant
    end if

    colorsRGBObj = {}

    for each color in BGE.Colors().Items()
      colorsRGBObj[color.key] = color.value >> 8
    end for

    if invalid <> m
      m.BGEColorsRGBConstant = colorsRGBObj
    end if

    return colorsRGBObj
  end function

  function GetColor(name as string) as integer
    colorsObj = BGE.Colors()
    color = colorsObj.White
    if invalid <> colorsObj[name]
      return colorsObj[name]
    end if
  end function


  function GetColorRGB(name as string) as integer
    colorsObj = BGE.ColorsGB()
    color = colorsObj.White
    if invalid <> colorsObj[name]
      return colorsObj[name]
    end if
  end function


end namespace