' @module BGE
namespace BGE

  function HSVtoRGBA(hPercent, sPercent, vPercent, a = invalid) as integer
    ' Romans_I_XVI port (w/ a few tweaks) of: https://schinckel.net/2012/01/10/hsv-to-rgb-in-javascript/
    ' @see http://schinckel.net/2012/01/10/hsv-to-rgb-in-javascript/

    hPercent = hPercent MOD 360

    rgb = [0, 0, 0]
    if sPercent = 0
      rgb = [vPercent / 100, vPercent / 100, vPercent / 100]
    else
      s = sPercent / 100 : v = vPercent / 100 : h = hPercent / 60 : i = int(h)

      data = [v * (1 - s), v * (1 - s * (h - i)), v * (1 - s * (1 - (h - i)))]

      if i = 0
        rgb = [v, data[2], data[0]]
      else if i = 1
        rgb = [data[1], v, data[0]]
      else if i = 2
        rgb = [data[0], v, data[2]]
      else if i = 3
        rgb = [data[0], data[1], v]
      else if i = 4
        rgb = [data[2], data[0], v]
      else
        rgb = [v, data[0], data[1]]
      end if
    end if

    for c = 0 to rgb.count() - 1
      rgb[c] = int(rgb[c] * 255)
    end for
    if a <> invalid
      color% = (rgb[0] << 24) + (rgb[1] << 16) + (rgb[2] << 8) + a
    else
      color% = (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]
    end if

    return color%
  end function

  function RGBAtoRGBA(red as integer, green as integer, blue as integer, alpha = 1 as float) as integer
    red% = cint((BGE.Math_Clamp(red, 0, 255))) and &hFF
    green% = cint((BGE.Math_Clamp(green, 0, 255))) and &hFF
    blue% = cint((BGE.Math_Clamp(blue, 0, 255))) and &hFF
    if 0 > alpha
      alpha = 0
    else if 1 < alpha
      alpha = 1
    end if
    alphaInt% = cint(BGE.Math_Clamp(cint(alpha * &hFF), 0, 255))and &hFF

    color% = (red% << 24) + (green% << 16) + (blue% << 8) + alphaInt%

    return color%
  end function




  function DrawText(draw2d as object, text as string, x as integer, y as integer, font as object, alignment = "left" as string, color = -1 as integer) as void
    if alignment = "left"
      draw2d.DrawText(text, x, y, color, font)
    else if alignment = "right"
      draw2d.DrawText(text, x - font.GetOneLineWidth(text, 10000), y, color, font)
    else if alignment = "center"
      draw2d.DrawText(text, x - font.GetOneLineWidth(text, 10000) / 2, y, color, font)
    end if
  end function

  ' NOTE: This function is unsafe! It creates an roBitmap of the required size to be able to both scale and rotate the drawing, this action requires free video memory of the appropriate amount.
  function DrawScaledAndRotatedObject(draw2d as object, x as float, y as float, scale_x as float, scale_y as float, theta as float, drawable as object, color = -1 as integer) as void
    new_width = Abs(int(drawable.GetWidth() * scale_x))
    new_height = Abs(int(drawable.GetHeight() * scale_y))
    if new_width <> 0 and new_height <> 0

      scaledBitmap = CreateObject("roBitmap", {width: new_width, height: new_height, AlphaEnable: true})

      scaledRegion = CreateObject("roRegion", scaledBitmap, 0, 0, new_width, new_height)
      pretranslation_x = drawable.GetPretranslationX()
      pretranslation_y = drawable.GetPretranslationY()
      newPreX = pretranslation_x * scale_x
      if scale_x < 0
        newPreX = - newPreX
      end if
      newPreY = pretranslation_y * scale_y
      if scale_y < 0
        newPreY = - newPreY
      end if
      scaledRegion.setPretranslation(- Abs(newPreX), - Abs(newPreY))
      scaled_draw_x = Abs(newPreX)
      scaled_draw_y = Abs(newPreY)

      scaledRegion.DrawScaledObject(scaled_draw_x, scaled_draw_y, scale_x, scale_y, drawable)

      draw2d.ifDraw2D.DrawRotatedObject(x, y, theta, scaledRegion, color)
      new_drawable = invalid
    end if
  end function


  function TexturePacker_GetRegions(atlas as dynamic, bitmap as object) as object
    if type(atlas) = "String" or type(atlas) = "roString"
      atlas = ParseJson(atlas)
    end if
    regions = {}
    for each key in atlas.frames
      item = atlas.frames[key]

      region = CreateObject("roRegion", bitmap, item.frame.x, item.frame.y, item.frame.w, item.frame.h)

      if item.DoesExist("pivot")
        translation_x = item.spriteSourceSize.x - item.sourceSize.w * item.pivot.x
        translation_y = item.spriteSourceSize.y - item.sourceSize.h * item.pivot.y
        region.SetPretranslation(translation_x, translation_y)
      end if

      regions[key] = region
    end for

    return regions
  end function


  ' -----------------------Utilities Used By Game Engine---------------------------

  function ArrayInsert(array as object, index as integer, value as dynamic)
    for i = array.Count() to index + 1 step -1
      array[i] = array[i - 1]
    end for
    array[index] = value
    return array
  end function

  function DrawCircleOutline(draw2d as object, line_count as integer, x as float, y as float, radius as float, rgba as integer)
    previous_x = radius
    previous_y = 0
    for i = 0 to line_count
      degrees = 360 * (i / line_count)
      current_x = cos(degrees * .01745329) * radius
      current_y = sin(degrees * .01745329) * radius
      draw2d.DrawLine(x + previous_x, y + previous_y, x + current_x, y + current_y, rgba)
      previous_x = current_x
      previous_y = current_y
    end for
  end function


  function DrawRectangleOutline(draw2d as object, x as float, y as float, width as float, height as float, rgba as integer)
    draw2d.DrawLine(x, y, x + width, y, rgba)
    draw2d.DrawLine(x, y, x, y + height, rgba)
    draw2d.DrawLine(x + width, y, x + width, y + height, rgba)
    draw2d.DrawLine(x, y + height, x + width, y + height, rgba)
  end function




  function isValidEntity(entity as object) as boolean
    return invalid <> entity and entity.id <> invalid
  end function


  ' 	' -------Button Code Reference--------
  ' 	' Button  Pressed Released  Held
  '   ' ------------------------------
  ' 	' Back         0      100   1000
  ' 	' Up           2      102   1002
  ' 	' Down         3      103   1003
  ' 	' Left         4      104   1004
  ' 	' Right        5      105   1005
  ' 	' OK           6      106   1006
  ' 	' Replay       7      107   1007
  ' 	' Rewind       8      108   1008
  ' 	' FastForward  9      109   1009
  ' 	' Options     10      110   1010
  ' 	' Play        13      113   1013

  function buttonNameFromCode(buttonCode as integer) as string
    buttonId = buttonCode mod 100
    possibleButtonNames = [
      "back",
      invalid,
      "up",
      "down"
      "left",
      "right",
      "OK",
      "replay",
      "rewind",
      "fastforward",
      "options",
      invalid,
      invalid,
      "play"
    ]
    if buttonId < possibleButtonNames.count()
      return possibleButtonNames[buttonId]
    end if
    return invalid
  end function


  function cloneArray(original = [] as object) as object
    retVal = []
    for each item in original
      retVal.push(item)
    end for
    return retVal
  end function
end namespace



