
class Player extends SpaceEntity

  rocketCollider = invalid
  rocketImage = invalid
  rocketOnImage = invalid
  thrust = 0
  dead = false

  acceleration = 2
  rotationAdjustment = 90 ' rocket image points up, so it adds 90 degrees

  function new(game) as void
    super(game)
    m.name = "Player"
  end function


  override function onCreate(args)
    m.y = m.game.getCanvas().GetHeight() / 2
    m.x = m.game.getCanvas().GetWidth() / 2
    m.rotation = 0
    rocketBitmap = m.game.getBitmap("rocket")
    rocketOnBitmap = m.game.getBitmap("rocket_on")
    m.width = rocketBitmap.GetWidth()
    m.height = rocketBitmap.GetHeight()
    rocketOnHeight = rocketOnBitmap.getHeight()
    m.rocketCollider = m.addCircleCollider("rocket", m.width / 3)

    'bs:disable-next-line
    region = CreateObject("roRegion", rocketBitmap, 0, 0, m.width, m.height)
    region.SetPreTranslation(- m.width / 2, - m.height / 2)
    m.rocketImage = m.addImage("rocket", region, {})
    'bs:disable-next-line
    region2 = CreateObject("roRegion", rocketOnBitmap, 0, 0, m.width, rocketOnHeight)
    region2.SetPreTranslation(- m.width / 2, - m.height / 2)
    m.rocketOnImage = m.addImage("rocket_on", region2, {})

  end function

  override function onCollision(colliderName as string, other_colliderName as string, other_entity as object)
    if other_entity.name = "Rock"
      m.dead = true
      m.acceleration = 0
      m.game.postGameEvent("game_over")
    end if
  end function


  override function onUpdate(deltaTime as float)
    super.onUpdate(deltaTime)

    m.xspeed += deltaTime * m.thrust * cos(m.getRocketRadRotation()) * m.acceleration
    m.yspeed += deltaTime * m.thrust * sin(m.getRocketRadRotation()) * m.acceleration
    m.rocketImage.enabled = m.thrust = 0
    m.rocketOnImage.enabled = m.thrust <> 0

  end function


  override function onInput(input as object)
    if not m.dead
      m.rotationalThrust = input.x
      if input.isButton("up")
        m.thrust = input.y
      else if input.isButton("ok") and input.press
        m.shoot()
      end if
    end if
  end function

  function getRocketRadRotation() as float
    return (m.rotation + m.rotationAdjustment) * 0.01745329
  end function


  override function shoot()
    bulletX = m.x - m.rocketCollider.radius * 1.2 * cos(m.getRocketRadRotation())
    bulletY = m.y - m.rocketCollider.radius * 1.2 * sin(m.getRocketRadRotation())
    m.game.addEntity(new Bullet(m.game), {x: bulletX, y: bulletY, rotation: m.rotation - m.rotationAdjustment, speed: 10 + Abs(m.xspeed * m.yspeed)})
  end function
end class