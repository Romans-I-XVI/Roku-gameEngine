class MainRoom extends BGE.Room

  pixDraws = []
  pixDraw2 = createObject("roBitmap", {width: 1280, height: 720, AlphaEnable: true, name: "MyBitmapName"})
  pixDraw3 = createObject("roBitmap", {width: 1280, height: 720, AlphaEnable: true, name: "MyBitmapName"})

  drawLevels = []
  triangles = []
  triangleCount = 200
  TriangleMaxSize = 300

  rot = 0


  drawn = false
  maxDrawLevel = 10
  drawLevel = 0
  nextTriangle = 0
  timecount = 0

  function new(game) as void
    super(game)
    m.name = "MainRoom"
  end function

  override function onCreate(args)


    m.getRandomTriangles()
    for i = 0 to m.triangleCount - 1
      m.pixDraws.push(createObject("roBitmap", {width: m.TriangleMaxSize, height: m.TriangleMaxSize, AlphaEnable: true, name: "MyBitmapName"}))
    end for

  end function

  sub getRandomTriangles()
    m.triangles = []
    for i = 0 to m.triangleCount - 1
      m.drawLevels.push(0)
      m.triangles.push(m.getRandomTriangle())
    end for
  end sub

  function getRandomTriangle()
    tri = []
    for i = 0 to 2
      tri.push({x: rnd(m.TriangleMaxSize), y: rnd(m.TriangleMaxSize)})
    end for
    return tri
  end function

  override function onUpdate(dt)

    ' m.getRandomTriangles()
    'm.drawn = false
    m.rot += (dt * 10)

    m.timecount += dt
    if m.timecount > 0.5
      m.timecount = 0
      m.drawLevels[m.nextTriangle] = 0
      m.triangles[m.nextTriangle] = m.getRandomTriangle()
      m.nextTriangle = rnd(m.triangleCount) - 1
    end if
  end function

  override function onInput(input)
    if input.isButton("ok") and input.press

      m.getRandomTriangles()
      ' m.drawn = false
      m.drawLevel = 0
    end if

  end function

  override function onDrawBegin(canvas)

    '
    for i = 0 to m.triangleCount - 1
      if m.drawLevels[i] < m.maxDrawLevel
        if m.drawLevels[i] = 0
          if invalid <> m.pixDraws[i]
            m.pixDraws[i].clear(0)
          end if
        end if
        m.drawTriangle(m.triangles[i], m.pixDraws[i], m.maxDrawLevel, m.drawLevels[i])
        m.drawLevels[i]++


      end if
    end for


    rows = cint(sqr(m.triangleCount))
    xdelta = (1280 / rows)
    ydelta = (720 / rows)

    for i = 0 to m.triangleCount - 1

      region1 = CreateObject("roRegion", m.pixDraws[i], 0, 0, m.TriangleMaxSize, m.TriangleMaxSize)
      region1.SetPreTranslation(- m.TriangleMaxSize / 2, - m.TriangleMaxSize / 2)
      rotation = m.rot
      if i mod 2 = 1
        rotation = - m.rot
      end if
      canvas.drawRotatedObject(xdelta * ((i mod rows)) + xdelta / 2, ydelta * ((i / rows)) + ydelta / 2, rotation, region1)
      'BGE.DrawScaledAndRotatedObject(canvas, xdelta * ((i mod rows)) + xdelta / 2, ydelta * ((i / rows)) + ydelta / 2, 2, 2, m.rot, region1)
    end for

  end function


  override function onGameEvent(event as string, data as object)

  end function


  function drawPixels()
    xnum = 1280
    ynum = 720
    xstart = 0
    ystart = 0
    xMax = xstart + xnum
    yMax = ystart + ynum
    pix_step = 50

    m.pixDraw.clear(255)
    'bytes = m.pixDraw.getByteArray(0, 0, 1280, 720)
    for i = xstart to xMax * (yMax / pix_step) step pix_step

      'for y = ystart to yMax step pix_step
      x = i mod xMax
      y = cint((i - x) / xMax) * pix_step
      r% = (x * 255) / xMax
      g% = (y * 255) / yMax
      b% = (((xMax + yMax) - (x + y)) * 255) / (xMax + yMax)

      color% = BGE.RGBAtoRGBA(r%, g%, b%)
      '?r%;g%;b%;color%

      'bytes[y * 1280 + x] = color%
      m.pixDraw.drawPoint(x, y, pix_step, color%)'BGE.RGBAtoRGBA(r%, g%, &hFF, 1))
      'end for
    end for
    m.drawn = true
  end function

  function drawLines()
    m.pixDraw.clear(255)
    xMax = 1280
    yMax = 720
    total = 1000
    steps = total / 2
    for i = 0 to steps
      x = i / steps * xMax
      y = i / steps * yMax

      r% = (x * 255) / xMax
      g% = (y * 255) / yMax
      b% = (((xMax + yMax) - (x + y)) * 255) / (xMax + yMax)

      color% = BGE.RGBAtoRGBA(r%, g%, b%)
      '?r%;g%;b%;color%

      m.pixDraw.drawLine(0, y, x, 0, color%)'BGE.RGBAtoRGBA(r%, g%, &hFF, 1))

    end for
    for i = 0 to steps
      x = i / steps * xMax
      y = i / steps * yMax

      r% = (x * 255) / xMax
      g% = (y * 255) / yMax
      b% = (((xMax + yMax) - (x + y)) * 255) / (xMax + yMax)

      color% = BGE.RGBAtoRGBA(r%, g%, b%)
      '?r%;g%;b%;color%

      m.pixDraw.drawLine(x, yMax, xMax, y, color%)'BGE.RGBAtoRGBA(r%, g%, &hFF, 1))

    end for
    m.drawn = true
  end function

  function drawLines2()
    m.pixDraw.clear(255)
    xMax = 1280
    yMax = 720
    stepVal = 2
    for i = 0 to yMax / stepVal
      x = 0
      y = i * stepVal

      r% = (x * 255) / xMax
      g% = (y * 255) / yMax
      b% = (((xMax + yMax) - (x + y)) * 255) / (xMax + yMax)

      color% = BGE.RGBAtoRGBA(r%, g%, b%)
      '?r%;g%;b%;color%

      m.pixDraw.drawLine(0, y, xMax, y, color%)'BGE.RGBAtoRGBA(r%, g%, &hFF, 1))
      'm.pixDraw.drawLine(0, y + 1, xMax, y + 1, color%)'BGE.RGBAtoRGBA(r%, g%, &hFF, 1))

    end for

  end function


  sub drawTriangle(tri, pixDraw, levelOfDetail = 1, levelOffset = 0)
    if invalid = pixDraw
      return
    end if

    len0 = BGE.Math_TotalDistance(tri[1], tri[2])
    len1 = BGE.Math_TotalDistance(tri[0], tri[2])
    len2 = BGE.Math_TotalDistance(tri[0], tri[1])
    apexIndex = 0
    shortLength = 0

    if len0 <= len1 and len0 <= len2
      apexIndex = 0
      shortLength = len0
    else if len1 <= len0 and len1 < len0
      apexIndex = 1
      shortLength = len1
    else ' if len2 < len0 and len2 < len1
      apexIndex = 2
      shortLength = len2
    end if
    apex = tri[apexIndex]
    startP = tri[(apexIndex + 1) mod 3]
    endP = tri[(apexIndex + 2) mod 3]

    if shortLength > 0
      r% = (startP.x * 255) / shortLength
      g% = (endP.y * 255) / shortLength
      b% = (((shortLength + shortLength) - (EndP.x + startP.y)) * 255) / (shortLength + shortLength)

      color% = BGE.RGBAtoRGBA(r%, g%, b%)
      pixDraw.drawLine(startP.x, startP.y, endP.x, endP.y, color%)
      for i = levelOffset to shortLength step levelOfDetail
        x = BGE.LinearTween(startP.x, endP.x, i, shortLength)
        y = BGE.LinearTween(startP.y, endP.y, i, shortLength)
        r% = (x * 255) / shortLength
        g% = (y * 255) / shortLength
        b% = (((shortLength + shortLength) - (x + y)) * 255) / (shortLength + shortLength)

        color% = BGE.RGBAtoRGBA(r%, g%, b%)
        pixDraw.drawLine(apex.x, apex.y, x, y, color%)
      end for
      r% = (endP.x * 255) / shortLength
      g% = (endP.y * 255) / shortLength
      b% = (((shortLength + shortLength) - (EndP.x + endP.y)) * 255) / (shortLength + shortLength)

      color% = BGE.RGBAtoRGBA(r%, g%, b%)
      pixDraw.drawLine(apex.x, apex.y, endP.x, endP.y, color%)
    end if

  end sub

end class